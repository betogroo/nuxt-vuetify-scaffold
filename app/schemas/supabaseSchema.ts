// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./../types/supabase.d";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const classesRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
});

export const classesInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
});

export const classesUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
});

export const classesRelationshipsSchema = z.tuple([]);

export const demandSiteSchema = z.union([
  z.literal("1062-9"),
  z.literal("1342-5"),
]);

export const demandStatusSchema = z.union([
  z.literal("new"),
  z.literal("consulted"),
  z.literal("released"),
  z.literal("issued"),
  z.literal("error"),
]);

export const demandTypeSchema = z.union([
  z.literal("1cin"),
  z.literal("2cin"),
  z.literal("1v"),
  z.literal("2v"),
  z.literal("2t"),
  z.literal("1ve"),
  z.literal("2ve"),
]);

export const documentDemandInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  document_number: z.string(),
  id: z.number().optional(),
  name: z.string().optional(),
  note: z.string().optional().nullable(),
  site: demandSiteSchema,
  status: demandStatusSchema.optional(),
  type: demandTypeSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const documentDemandUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  document_number: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  note: z.string().optional().nullable(),
  site: demandSiteSchema.optional(),
  status: demandStatusSchema.optional(),
  type: demandTypeSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const documentDemandRelationshipsSchema = z.tuple([]);

export const documentStatusHistoryRowSchema = z.object({
  changed_at: z.string(),
  changed_by: z.string().nullable(),
  document_demand_id: z.number(),
  id: z.number(),
  new_status: demandStatusSchema,
  old_status: demandStatusSchema,
});

export const documentStatusHistoryInsertSchema = z.object({
  changed_at: z.string().optional(),
  changed_by: z.string().optional().nullable(),
  document_demand_id: z.number(),
  id: z.number().optional(),
  new_status: demandStatusSchema,
  old_status: demandStatusSchema,
});

export const documentStatusHistoryUpdateSchema = z.object({
  changed_at: z.string().optional(),
  changed_by: z.string().optional().nullable(),
  document_demand_id: z.number().optional(),
  id: z.number().optional(),
  new_status: demandStatusSchema.optional(),
  old_status: demandStatusSchema.optional(),
});

export const documentStatusHistoryRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "document_status_history_document_demand_id_fkey",
    ),
    columns: z.tuple([z.literal("document_demand_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("document_demand"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const profileTypesRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string(),
});

export const profileTypesInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string(),
});

export const profileTypesUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional(),
});

export const profileTypesRelationshipsSchema = z.tuple([]);

export const profilesRowSchema = z.object({
  id: z.string(),
  name: z.string().nullable(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
});

export const profilesInsertSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const profilesUpdateSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const profilesRelationshipsSchema = z.tuple([]);

export const schedulesRowSchema = z.object({
  class_id: z.string().nullable(),
  created_at: z.string(),
  day: z.number().nullable(),
  end_time: z.string().nullable(),
  id: z.string(),
  start_time: z.string(),
  subject_id: z.string().nullable(),
  teacher_id: z.string().nullable(),
});

export const schedulesInsertSchema = z.object({
  class_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  day: z.number().optional().nullable(),
  end_time: z.string().optional().nullable(),
  id: z.string().optional(),
  start_time: z.string(),
  subject_id: z.string().optional().nullable(),
  teacher_id: z.string().optional().nullable(),
});

export const schedulesUpdateSchema = z.object({
  class_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  day: z.number().optional().nullable(),
  end_time: z.string().optional().nullable(),
  id: z.string().optional(),
  start_time: z.string().optional(),
  subject_id: z.string().optional().nullable(),
  teacher_id: z.string().optional().nullable(),
});

export const schedulesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("schedules_class_id_fkey"),
    columns: z.tuple([z.literal("class_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("classes"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("schedules_subject_id_fkey"),
    columns: z.tuple([z.literal("subject_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("subjects"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("schedules_teacher_id_fkey"),
    columns: z.tuple([z.literal("teacher_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teachers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const subjectsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
});

export const subjectsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
});

export const subjectsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
});

export const subjectsRelationshipsSchema = z.tuple([]);

export const teacherAvailabilityRowSchema = z.object({
  created_at: z.string(),
  day_of_week: z.number(),
  id: z.string(),
  is_available: z.boolean(),
  teacher_id: z.string(),
  time_slot_id: z.number(),
});

export const teacherAvailabilityInsertSchema = z.object({
  created_at: z.string().optional(),
  day_of_week: z.number(),
  id: z.string().optional(),
  is_available: z.boolean().optional(),
  teacher_id: z.string(),
  time_slot_id: z.number(),
});

export const teacherAvailabilityUpdateSchema = z.object({
  created_at: z.string().optional(),
  day_of_week: z.number().optional(),
  id: z.string().optional(),
  is_available: z.boolean().optional(),
  teacher_id: z.string().optional(),
  time_slot_id: z.number().optional(),
});

export const teacherAvailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("teacher_availability_teacher_id_fkey"),
    columns: z.tuple([z.literal("teacher_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teachers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("teacher_availability_time_slot_id_fkey"),
    columns: z.tuple([z.literal("time_slot_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("time_slots"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const teachersRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string().nullable(),
});

export const teachersInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional().nullable(),
});

export const teachersUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional().nullable(),
});

export const teachersRelationshipsSchema = z.tuple([]);

export const timeSlotsRowSchema = z.object({
  created_at: z.string(),
  end_time: z.string(),
  id: z.number(),
  is_break: z.boolean(),
  name: z.string(),
  start_time: z.string(),
});

export const timeSlotsInsertSchema = z.object({
  created_at: z.string().optional(),
  end_time: z.string(),
  id: z.number().optional(),
  is_break: z.boolean().optional(),
  name: z.string(),
  start_time: z.string(),
});

export const timeSlotsUpdateSchema = z.object({
  created_at: z.string().optional(),
  end_time: z.string().optional(),
  id: z.number().optional(),
  is_break: z.boolean().optional(),
  name: z.string().optional(),
  start_time: z.string().optional(),
});

export const timeSlotsRelationshipsSchema = z.tuple([]);

export const documentDemandRowSchema = z.object({
  created_at: z.string().nullable(),
  document_number: z.string(),
  id: z.number(),
  name: z.string(),
  note: z.string().nullable(),
  site: demandSiteSchema,
  status: demandStatusSchema,
  type: demandTypeSchema.nullable(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});
